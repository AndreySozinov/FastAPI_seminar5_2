# –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
# –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Movie —Å –ø–æ–ª—è–º–∏ id, title, description –∏ genre.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ movies –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.
import logging
from fastapi import FastAPI, HTTPException
from typing import Optional
from pydantic import BaseModel

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


class Genre(BaseModel):
    id: int
    name: str


class Movie(BaseModel):
    id: int
    title: str
    description: Optional[str] = None
    genre_id: list[int]


class MovieForm(BaseModel):
    title: str
    description: Optional[str] = None
    genre_id: list[int]


genres = []
movies = []


@app.get('/')
async def index():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return {"message": "Movie list manager"}


@app.get('/movies', response_model=list[Movie], summary='–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∂–∞–Ω—Ä—É')
async def read_list(gen_id: int = None):
    if gen_id:
        movie_list = [m for m in movies if gen_id in m.genre_id]
        logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
        return movie_list
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return movies


@app.post("/movies", response_model=Movie, summary='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞')
async def create_movie(movie: MovieForm):
    new_movie_id = 1
    if movies:
        new_movie_id = max(movies, key=lambda x: x.id).id + 1
    new_movie = Movie(id=new_movie_id, title=movie.title, description=movie.description, genre_id=movie.genre_id)
    movies.append(new_movie)
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    return new_movie


@app.put('/movies/{task_id}', response_model=Movie, summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ')
async def update_movie(movie_id: int, movie: MovieForm):
    for el in movies:
        if el.id == movie_id:
            el.title = movie.title
            el.description = movie.description
            el.genre_id = movie.genre_id
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {movie_id}.')
            return el
    raise HTTPException(status_code=404, detail='Movie with this ID not found')


@app.delete('/movies/{movie_id}', summary='–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞')
async def delete_movie(movie_id: int):
    for el in movies:
        if el.id == movie_id:
            movies.remove(el)
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {movie_id}.')
            return
    raise HTTPException(status_code=404, detail='Movie with this ID not found')
