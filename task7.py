"""
–°–æ–∑–¥–∞—Ç—å RESTful API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FastAPI –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID.
‚óã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.
‚óã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID.
‚óã –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID.
üìå –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ),
–ù–∞–∑–≤–∞–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞), –û–ø–∏—Å–∞–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞), –°—Ç–∞—Ç—É—Å (—Å—Ç—Ä–æ–∫–∞): "todo", "in progress", "done".
–°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_tasks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_task –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID
(–º–µ—Ç–æ–¥ GET).
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é create_task –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é update_task –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë ID
(–º–µ—Ç–æ–¥ PUT).
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é delete_task –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID (–º–µ—Ç–æ–¥ DELETE).
"""
from enum import Enum
import logging
from fastapi import FastAPI, HTTPException
from typing import Optional
from pydantic import BaseModel

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


class Status(str, Enum):
    ToDo = 'todo'
    InProgress = 'in progress'
    Done = 'done'


class Task(BaseModel):
    id: int
    title: str
    description: Optional[str] = None
    status: Status


class TaskForm(BaseModel):
    title: str
    description: Optional[str] = None
    status: Status


tasks = []


@app.get('/')
async def index():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return {"message": "Task list manager"}


@app.get('/tasks', response_model=list[Task], summary='–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á')
async def get_tasks():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return tasks


@app.get('/tasks/{task_id}', response_model=Task, summary='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –ø–æ –µ–µ ID')
async def get_task(task_id: int):
    for el in tasks:
        if el.id == task_id:
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task_id}.')
            return el
    raise HTTPException(status_code=404, detail='Task with this ID not found')


@app.post("/tasks", response_model=Task, summary='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')
async def create_task(task: TaskForm):
    new_task_id = 1
    if tasks:
        new_task_id = max(tasks, key=lambda x: x.id).id + 1
    new_task = Task(id=new_task_id, title=task.title, description=task.description, status=task.status)
    tasks.append(new_task)
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    return new_task


@app.put('/tasks/{task_id}', response_model=Task, summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ')
async def update_task(task_id: int, task: TaskForm):
    for el in tasks:
        if el.id == task_id:
            el.title = task.title
            el.description = task.description
            el.status = task.status
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task_id}.')
            return el
    raise HTTPException(status_code=404, detail='Task with this ID not found')


@app.delete('/tasks/{task_id}', summary='–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏')
async def delete_task(task_id: int):
    for el in tasks:
        if el.id == task_id:
            tasks.remove(el)
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task_id}.')
            return
    raise HTTPException(status_code=404, detail='Task with this ID not found')
