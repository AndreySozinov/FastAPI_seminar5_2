# –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ—Ç–æ–¥ POST).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.
import hashlib
import logging
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, EmailStr, Field

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


class User(BaseModel):
    id: int
    name: str
    email: EmailStr
    password: str


class UserForm(BaseModel):
    name: str
    email: EmailStr = Field(..., description='Email address')
    password: str = Field(..., min_length=8, regex=r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).*$', description='Password')


users = []


@app.get('/')
async def root():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return {"message": "User list manager"}


@app.get('/users', response_model=list[User], summary='–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def read_list():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return users


@app.post("/users", summary='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', tags=['Users'])
async def create_user(user: UserForm):
    new_user_id = 1
    if users:
        new_user_id = max(users, key=lambda x: x.id).id + 1
    new_user = User(id=new_user_id,
                    name=user.name,
                    email=user.email,
                    password=hashlib.md5(user.password).hexdigest())
    users.append(new_user)
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')


@app.put('/users/{user_id}', response_model=User, summary='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def update_user(user_id: int, user: UserForm):
    for el in users:
        if el.id == user_id:
            el.name = user.name
            el.email = user.email
            el.password = hashlib.md5(user.password).hexdigest()
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è user id = {user_id}.')
            return el
    raise HTTPException(status_code=404, detail='User with this ID not found')


@app.delete('/users/{user_id}', summary='–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def delete_user(user_id: int):
    for el in users:
        if el.id == user_id:
            users.remove(el)
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è user id = {user_id}.')
            return
    raise HTTPException(status_code=404, detail='User with this ID not found')
